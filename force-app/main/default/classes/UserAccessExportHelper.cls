/**
 * @description Helper class for generating Excel exports of user access data
 * @author Salesforce Development Team
 * @date 2025
 */
public with sharing class UserAccessExportHelper {
    
    /**
     * @description Generate Excel content for user access summary
     * @param userId The user ID to export data for
     * @return Base64 encoded Excel file content
     */
    @AuraEnabled
    public static String generateExcelExport(String userId) {
        try {
            UserAccessSummaryController.UserInfo userDetails = UserAccessSummaryController.getUserDetails(userId);
            String csvContent = generateBasicCSVContent(userDetails, userId);
            Blob csvBlob = Blob.valueOf(csvContent);
            return EncodingUtil.base64Encode(csvBlob);
        } catch (Exception e) {
            throw new AuraHandledException('Error generating export: ' + e.getMessage());
        }
    }
    
    /**
     * @description Generate basic CSV content for user access data
     * @param userDetails User basic information
     * @param userId User ID for additional data retrieval
     * @return CSV formatted string
     */
    private static String generateBasicCSVContent(UserAccessSummaryController.UserInfo userDetails, String userId) {
        List<String> csvLines = new List<String>();
        
        // Header
        csvLines.add('User Access Summary Report');
        csvLines.add('Generated on: ' + DateTime.now().format('yyyy-MM-dd HH:mm:ss'));
        csvLines.add('');
        
        // User Information
        csvLines.add('=== USER INFORMATION ===');
        csvLines.add('Field,Value');
        csvLines.add('"Name","' + escapeCsvValue(userDetails.name) + '"');
        csvLines.add('"Username","' + escapeCsvValue(userDetails.username) + '"');
        csvLines.add('"Email","' + escapeCsvValue(userDetails.email) + '"');
        csvLines.add('"Profile","' + escapeCsvValue(userDetails.profileName) + '"');
        csvLines.add('"Status","' + (userDetails.isActive ? 'Active' : 'Inactive') + '"');
        
        String managerName = userDetails.managerName != null ? userDetails.managerName : 'None';
        csvLines.add('"Manager","' + escapeCsvValue(managerName) + '"');
        
        String department = userDetails.department != null ? userDetails.department : 'None';
        csvLines.add('"Department","' + escapeCsvValue(department) + '"');
        
        String title = userDetails.title != null ? userDetails.title : 'None';
        csvLines.add('"Title","' + escapeCsvValue(title) + '"');
        
        String lastLogin = userDetails.lastLoginDate != null ? 
                          userDetails.lastLoginDate.format('yyyy-MM-dd HH:mm:ss') : 'Never';
        csvLines.add('"Last Login","' + lastLogin + '"');
        
        csvLines.add('"Created Date","' + userDetails.createdDate.format('yyyy-MM-dd HH:mm:ss') + '"');
        csvLines.add('');
        
        // Add permission sets section
        addPermissionSetsSection(csvLines, userId);
        
        // Footer
        csvLines.add('=== END OF REPORT ===');
        csvLines.add('This report was generated by the User Access Summary App');
        
        return String.join(csvLines, '\n');
    }
    
    /**
     * @description Add permission sets section to CSV
     * @param csvLines List of CSV lines to append to
     * @param userId User ID
     */
    private static void addPermissionSetsSection(List<String> csvLines, String userId) {
        try {
            List<UserAccessSummaryController.PermissionSetInfo> permissionSets = 
                UserAccessSummaryController.getUserPermissionSets(userId);
            
            csvLines.add('=== PERMISSION SETS ===');
            if (!permissionSets.isEmpty()) {
                csvLines.add('Label,API Name,Description,Type,Source');
                for (UserAccessSummaryController.PermissionSetInfo ps : permissionSets) {
                    String description = ps.description != null ? ps.description : '';
                    csvLines.add('"' + escapeCsvValue(ps.label) + '","' + 
                               escapeCsvValue(ps.name) + '","' + 
                               escapeCsvValue(description) + '","' + 
                               escapeCsvValue(ps.type) + '","' + 
                               escapeCsvValue(ps.source) + '"');
                }
            } else {
                csvLines.add('No permission sets assigned');
            }
            csvLines.add('');
        } catch (Exception e) {
            csvLines.add('Error retrieving permission sets: ' + e.getMessage());
            csvLines.add('');
        }
    }
    
    /**
     * @description Escape CSV values to handle commas, quotes, and newlines
     * @param value The value to escape
     * @return Escaped CSV value
     */
    private static String escapeCsvValue(String value) {
        if (String.isBlank(value)) {
            return '';
        }
        
        // Replace double quotes with double double quotes
        value = value.replace('"', '""');
        
        // Remove line breaks for CSV compatibility
        value = value.replace('\n', ' ').replace('\r', ' ');
        
        return value;
    }
    
    /**
     * @description Generate filename for the export
     * @param username The username for the export
     * @return Formatted filename
     */
    @AuraEnabled
    public static String generateExportFilename(String username) {
        String sanitizedUsername = username.replaceAll('[^a-zA-Z0-9]', '_');
        String dateString = DateTime.now().format('yyyy-MM-dd');
        return 'UserAccessSummary_' + sanitizedUsername + '_' + dateString + '.csv';
    }
}
